import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.InputMismatchException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Scanner;
import java.util.Set;


public class AutoUtils{
	//保存所有的.properties文件
	static List<File> proList=new LinkedList<File>();
	//保存所有的.conf配置文件
	static List<File> confList=new LinkedList<File>();
	//保存所有的.xml配置文件
	static List<File> xmlList=new LinkedList<File>();
	
	static List<Map<String,String>> pros=new LinkedList<Map<String,String>>();
	
	public static void main(String[]arg){
		
		//分离配置文件,查找所有的配置文件
		File dir = new File(System.getProperty("user.dir"));
		
		System.out.println("当前文件路径--->" + dir);
		
		getFilesAndInit(dir);//初始化文件List
		
		client();
		
		//对比配置文件并生成对比结果
	}
	/**
	 * 比较两个文件 
	 */
	private static void compareFiles(){
		
		System.out.println("输入2个文件 例如: /conf/log4j.properties,/temp/log4j.properties");
		
		String files=getInputStr();
		
		String[] fs=files.split(",");
		
		if(fs.length!=2){
			
			System.out.println("输入的格式不正确,确保文件之间是 \",\"分割");
			
			client();
			
		}
		if(fs[0].endsWith(".properties")&&fs[1].endsWith(".properties")){//判断文件类型,文件为properties文件
		
			Map<String,String> map1=read(new File(fs[0]));
			
			Map<String,String> map2=read(new File(fs[1]));
			
			if(map1.size()==map2.size()){//配置文件,参数一样,没有增加新参数
				
				Set<String> set1=map1.keySet();//map1的键 set
				
				Set<String> set2=map2.keySet();//map2的键set
				
				Iterator<String> iter1=set1.iterator();
				
				Iterator<String> iter2=set2.iterator();
				
				boolean f=true;//指示 键 是否相同
				
				boolean f1=true;//指示 键值 是否相同
				//比较键
				while(iter1.hasNext()){
					
					String t=(String) iter1.next();
					
					if(set2.contains(t)){//set2中是否包含set1中的值
						
						continue;
					}else{
						
						f=false;//不再包含
					}
				}
				//比较值,前提键 相同
				Map<String,String> tempMap=new HashMap<String,String>();//用来保存 不同的键值对
				
				while(iter2.hasNext()&&f){
					
					String k=(String) iter2.next();
					
					tempMap.put(k,map1.get(k));
					
					if(!map1.get(k).equals(map2.get(k))){//
						
						f1=false;
						
						System.out.println("File1 中 -->"+k+"="+map1.get(k) );
						System.out.println("File2中 -->"+k+"="+map2.get(k) );
						
						tempMap.put(k,map2.get(k));
						
					}
				}
				if(!f1&&f){//value值不同 key值相同
					
					System.out.println("发现键值value值不一样");
					System.out.println("是否进行替换,将file2中文件替换到file1中?, 1- 替换, 2- 不替换");
					
					int w=getInputNum();
					
					if(1!=w){
						
						client();
					}else{
						//替换操作
						if(replaceAndRecordPro(fs[0],tempMap)){
							System.out.println("替换操作成功");
							client();
						}else{
							System.out.println("替换操作失败");
							client();
						}
					}
				}
				if(f&&f1){
					
					System.out.println("两个文件的 键 相同");
				}else{
					System.out.println("两个文件的 键 值不同");
				}
				
			}else{
				
				System.out.println("键个数 不一致,File1 中有 :"+map1.size()+"个,File2中有:"+map2.size()+"个.");
				if(map1.size()>map2.size()){//file1中的键值对比file2的键值对多
					
					System.out.println("是否将");
				}
				
				System.out.println("是否将File2 中新");
			}
			
		}else{
			
			System.out.println("文件类型不一致,无法比较");
			
			client();
		}
		
	}
	/**
	 * /**
	 * properties 文件替换操作,并记录 操作过程
	 * @return true 操作陈功,false 操作失败
	 * @param absFile 要被替换的文件
	 * @param map 要替换的数据
	 */
	private static boolean replaceAndRecordPro(String absFile,Map<String,String> map){
		
		InputStream is=null;
		OutputStream os =null;
		
		Properties pro=new Properties();

		try {
			
			is=new BufferedInputStream(new FileInputStream(absFile));
			
			os = new FileOutputStream(absFile);
			
			pro.load(is);

			for (Map.Entry<String, String> entry : map.entrySet()) {

				pro.setProperty(entry.getKey(), entry.getValue());
				
				pro.store(os, entry.getKey());

			}
			
		}catch (IOException e) {
			
			System.out.println("读取配置文件出错...");
			
			return false;
		}finally{
			
			try {
				is.close();
				os.close();
			} catch (IOException e) {
				System.out.println("关闭流出问题.");
				e.printStackTrace();
			}
		}
		
		return true;
	}
	/**
	 * 逐行比较两个文件内容
	 * @param fs 两个文件的绝对路径
	 */
	private static void lineCompare(String[] fs){
		
		boolean flag=false;//记录文件是否相同
		
		int resNum=0;//记录不同点个数
		
		try {
			BufferedReader br1=new BufferedReader(new FileReader(new File(fs[0])));
			
			BufferedReader br2=new BufferedReader(new FileReader(new File(fs[1])));
			
			String tempStr=null,tempStr2=null;
			
			int lineNum1=0,lineNum2=0;
			
			while((tempStr=br1.readLine())!=null&&(tempStr2=br2.readLine())!=null){
				
				++lineNum1;++lineNum2;
				
				if(!"".equals(tempStr)&&!"".equals(tempStr2)&&(tempStr.equals(tempStr2))){//行内容相同
					
					flag=true;
					
					continue;
				}else if("".equals(tempStr)&&"".equals(tempStr2)){//文件中出现空白行
					
					continue;
					
				}else if("".equals(tempStr)&&!"".equals(tempStr2)){//file1有空白行,file2不是空白行
					
					while(!"".equals(tempStr=br1.readLine())){//file1读取下一行,直到不为空白
						
						lineNum1++;//行号自增
						
						if(tempStr.equals(tempStr2)){
							
							flag=true;
							
							break;
						}else{//内容不同
							
							flag=false;
							
							resNum++;
							
							System.out.println("不同处 -"+resNum+" ---------->");
							System.out.println("文件1的第 "+lineNum1+"行,内容:-->"+tempStr);
							System.out.println("文件2的第 "+lineNum2+"行,内容:-->"+tempStr2);
							
							break;//退出空白行循环
						}
					}
					
					continue;
					
				}else if(!"".equals(tempStr)&&"".equals(tempStr2)){//file2有空白行,file1不是空白行

					while(!"".equals(tempStr2=br2.readLine())){
						
						lineNum2++;
						
						if(tempStr.equals(tempStr2)){
							
							break;
						}else{
							
							flag=false;
							
							resNum++;
							
							System.out.println("不同处-"+resNum+" ---------->");
							System.out.println("文件1的第 "+lineNum1+"行,内容:-->"+tempStr);
							System.out.println("文件2的第 "+lineNum2+"行,内容:-->"+tempStr2);
							break;
						}
					}
					continue;
				}else{
					
					flag=false;
					
					resNum++;
					
					System.out.println("不同处-"+resNum+" ---------->");
					System.out.println("文件1的第 "+lineNum1+"行,内容:-->"+tempStr);
					System.out.println("文件2的第 "+lineNum2+"行,内容:-->"+tempStr2);
				}
				
			}
			br1.close();
			
			br2.close();
			
			if(flag&&resNum==0){
				
				System.out.println("比较结果--->两个文件内容相同.");
				System.out.println("----------------------比较结束-------------------------");
				
				client();
			}else{
				
				System.out.println("比较结果--->两个文件内容不相同.");
				System.out.println("----------------------比较结束-------------------------");
				System.out.println("------>是否进行文件内容替换? 1:替换,2:不替换");
				int y=getInputNum();
				
				if(y!=1){
					
					client();
				}else{
					
					client();//替换文件
				}
			}
			
		} catch (FileNotFoundException e) {
			
			System.out.println("要比较的文件不存在,查看路径是否填写正确.");
			
			client();
		} catch (IOException e) {
			
			System.out.println("读取文件过程出错.");
			
			client();
		}
	}
	
	/**
	 * 第二入口,菜单列表
	 */
	private static void client(){
		
		
		System.out.println("#################选择要进行的操作#################");
		
		System.out.println("1 --比较两个文件");
		System.out.println("2--遍历所有可能.properties配置文件 ");
		System.out.println("3--遍历所有可能.xml配置文件");
		System.out.println("4--遍历所有可能.conf配置文件 ");
		System.out.println("5--打印指定properties文件键值对");
		System.out.println("0--退出");
		
		Integer num=getInputNum();
		
		switch(num){
		case 0: System.exit(0);
		case 1:compareFiles(); break;
		case 2:printList(proList);break;
		case 3:printList(xmlList);break;
		case 4:printList(confList);break;
		case 5:printPro();
		default: System.out.println("输入不正确.");client();
		
		}
		
	}
	/**
	 * 获取控制台输入的字符串
	 * @return
	 */
	private static String getInputStr(){
		
		BufferedReader strin=new BufferedReader(new InputStreamReader(System.in));  
		
		String str =null;
		
        try {
        	
			str = strin.readLine();
			
		} catch (IOException e) {
			
			System.out.println("读取控制台数据出错,");
			e.printStackTrace();
		} 
		
		return str;
	}
	/**
	 * 获取控制台输入的数据
	 * @return
	 */
	private static Integer getInputNum(){
		
		Scanner sc = new Scanner(System.in); 
		
		int res=0;
		
		try{
			res=sc.nextInt();
			
		}catch(InputMismatchException e){
			
			System.out.println("输入内容错误,输入数字.");
			
			client();
		}
		
		return res;
	}
	/**
	 * 输出List中file
	 */
	private static void printList(List<File> list){
		
		System.out.println("总共的文件数为 ----->"+list.size());
		
		for (File file : list) {

			System.out.println(file.getAbsolutePath());
		}
		client();
	}
	/**
	 * 打印输出Properites文件的 键值对
	 */
	private static void printPro() {
		
		System.out.println("输入文件名.");
		
		String absPath=getInputStr();

		if(absPath.endsWith(".properties")){//文件必须为properties文件
			
			File f=new File(absPath);
			System.out.println("------------------------Start------------------------");

			Map<String, String> map = read(f);

			System.out.println("文件名---->" + f.getName());

			for (Map.Entry<String, String> entry : map.entrySet()) {

				System.out.println(entry.getKey() + "= " + entry.getValue());

			}
			System.out.println("------------------------End--------------------------");
			
			client();
			
		}else{
			
			System.out.println("文件类型不对");
			
			client();
		}
	}
	/**
	 * 递归遍历文件,并把相应的配置文件放到指定的List中去完成文件的分离
	 * @param dir
	 * @return
	 */
	private static void getFilesAndInit(File dir){
		
		if(dir.isDirectory()){
			
			File[] files=dir.listFiles();
			
			for(File f:files){
				
				if(f.isDirectory()){
					
					getFilesAndInit(f);
				}else{
					
					String absPath=f.getAbsolutePath();
					
					if(absPath.indexOf("ibatis")==-1){//不是ibatis 映射文件
						
						String name=f.getName();
						
						if(name.endsWith(".properties")){
							
							proList.add(f);
						
						}else if(name.indexOf(".hbm.xml")==-1&&name.endsWith(".xml")){//不是hibernate配置映射文件
							
							xmlList.add(f);
						}else if(name.endsWith(".conf")){
							
							confList.add(f);
						}
					}
				}
			}
		}
	}

	/**
	 * 读取.properties文件,以map形式返回文件的 键值对形式
	 * @param path
	 * @return
	 */
	private static Map<String,String> read(File file){
		
		InputStream is=null;
		
		Properties pro=new Properties();

		Map<String,String> map1 = new HashMap<String,String>();
		
		try {
			
			is=new BufferedInputStream(new FileInputStream(file));
			
			pro.load(is);

			Enumeration<?> enum1 = pro.propertyNames();// 得到配置文件的名字

			while (enum1.hasMoreElements()) {

				String strKey = (String) enum1.nextElement();

				String strValue = pro.getProperty(strKey);

				map1.put(strKey, strValue);
				
			}
			
		}catch (IOException e) {
			
			System.out.println("读取配置文件出错...");
			
			return null;
		}finally{
			
			try {
				is.close();
			} catch (IOException e) {
				System.out.println("关闭流出问题.");
				e.printStackTrace();
			}
		}
		
		return map1;
	}
}
